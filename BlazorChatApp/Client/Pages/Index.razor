@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime


<PageTitle>Blazor Chat App</PageTitle>

<h3>Blazor Chat App</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input class="form-control" @bind="username" placeholder="What's your name"/>
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" @ref="textAreaRef">
        @messages
    </textarea>
        <div class="input-group">
            <input class="form-control" 
            @bind-value="message"
            @bind-value:event="oninput"
            @onkeyup="HandleInput"
            placeholder="What's your name"/>
            <button class="btn btn-primary form-control-append" @onclick="Send" disabled="@(!IsConnected)">Connect</button>
        </div>
}

@code{
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    private ElementReference textAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
        .Build();

        hubConnection.On<string, string>("ReciveMessage", (username, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(username) ? "" : username + ": ")} {message}";
            messages += msg + "\n";
            JsRuntime.InvokeVoidAsync("scrollToBottom", textAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;

        }
    }
    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key.Equals("Enter"))
        {
            await Send();
        }

    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}